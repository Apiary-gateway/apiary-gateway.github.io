---
const { children, headings } = Astro.props;
---

<div class="layout">
  <aside class="sidebar">
    <nav>
      <ul class="toc-list">
        {headings.map((item) => (
          <li>
            <a href={`#${item.id}`} class="toc-link" id={`link-${item.id}`}>
              {item.title}
            </a>
            {item.children && (
              <ul class="toc-sublist">
                {item.children.map((child) => (
                  <li>
                    <a href={`#${child.id}`} class="toc-link" id={`link-${child.id}`}>
                      {child.title}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
  </aside>

  <main class="content">
    <div class="content-wrapper">
      <slot />
    </div>
  </main>
</div>

<style>
  /* Ensure smooth scroll respects padding (e.g. if fixed headers exist) */
  html {
    scroll-padding-top: 5rem;
  }

  .layout {
    display: flex;
    background-color: var(--color-background);
    color: var(--color-text);
    min-height: 100vh;
    position: relative;
    margin-top: -5rem; /* Offset the main-content padding */
  }

  .sidebar {
    min-width: 250px;
    max-width: 350px;
    width: 25%;
    height: calc(100vh - 5rem); /* Subtract navbar height only */
    flex-basis: 250px;
    position: fixed;
    top: 5rem; /* Height of navbar */
    left: 0;
    overflow-y: auto;
    border-right: 1px solid var(--color-border);
    background-color: var(--color-background);
    z-index: 1;
    display: flex;
    flex-direction: column;
  }

  /* Custom scrollbar for sidebar */
  .sidebar::-webkit-scrollbar {
    width: 8px;
  }

  .sidebar::-webkit-scrollbar-track {
    background: var(--color-background);
  }

  .sidebar::-webkit-scrollbar-thumb {
    background: var(--color-border);
    border-radius: 4px;
  }

  .sidebar::-webkit-scrollbar-thumb:hover {
    background: var(--color-primary);
  }

  .sidebar nav {
    background-color: inherit;
    padding: 1.5rem 1.5rem 2rem 1rem; /* Reduced top padding, added bottom padding */
    width: 100%;
    max-width: 100%;
    margin-left: auto;
  }

  .content {
    flex: 1;
    padding: 2rem;
    margin-top: 4rem;
    margin-left: 25%;
    scroll-behavior: smooth;
    max-width: 100%;
    overflow-x: hidden;
    background-color: var(--color-background);
    color: var(--color-text);
  }

  .toc-list,
  .toc-sublist {
    list-style: none;
    padding-left: 2rem;
    margin-top: 0;
  }

  .toc-sublist {
    margin-left: 1rem;
    padding-left: 1rem;
  }

  .toc-link {
    display: block;
    padding: 0.35rem 0.75rem;
    color: var(--color-text);
    font-size: 1rem;
    text-decoration: none;
    transition: color 0.2s ease;
    white-space: normal;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .toc-link:hover {
    color: var(--color-primary);
  }

  .toc-link.active {
    color: #2ecc71;
    font-weight: 500;
  }

  /* Content Styling */
  :global(.content-wrapper) {
    width: 768px;
    margin: 0 auto;
    padding-left: 2rem;
  }

  :global(.content-wrapper h2) {
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    color: var(--color-text);
    font-size: 2rem;
    font-weight: 600;
    line-height: 1.3;
    scroll-margin-top: 6rem;
  }

  :global(.content-wrapper h3) {
    margin-top: 1.75rem;
    margin-bottom: 1.25rem;
    color: var(--color-text);
    font-size: 1.5rem;
    font-weight: 500;
    line-height: 1.4;
    scroll-margin-top: 6rem;
  }

  :global(.content-wrapper h4) {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    color: var(--color-text);
    font-size: 1.25rem;
    font-weight: 500;
    line-height: 1.4;
  }

  :global(.content-wrapper h5) {
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
    color: var(--color-text);
    font-size: 1.1rem;
    font-weight: 500;
    line-height: 1.4;
  }

  :global(.content-wrapper p) {
    margin-bottom: 1.25rem;
    line-height: 1.8;
    color: var(--color-text);
    text-align: justify;
  }

  :global(.content-wrapper p:last-child) {
    margin-bottom: 0;
  }

  :global(.content-wrapper img) {
    width: 100%;
    height: auto;
    margin: 2rem auto;
    display: block;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  :global(.content-wrapper ul) {
    margin-left: 1rem;
    padding-left: 1rem;
    padding-bottom: 1rem;
  }

  :global(.content-wrapper ol) {
    margin-left: 1rem;
    padding-left: 1rem;
    padding-bottom: 1rem;
  }

  /* Section spacing */
  :global(.content-wrapper section) {
    padding-top: 0.5rem;
    margin-top: 0rem;
    margin-bottom: 0rem;
    padding-bottom: 0.5rem;
  }

  :global(.content-wrapper .info-box) {
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0.75rem;
    background-color: var(--color-background-alt);
    border: 1px solid var(--color-border);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    width: 90%;
    margin-left: auto;
    margin-right: auto;
  }

  :global(.content-wrapper .info-box h4) {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--color-primary);
    font-size: 1.25rem;
    font-weight: 600;
  }

  :global(.content-wrapper .info-box p) {
    margin-bottom: 1rem;
    color: var(--color-text);
  }

  :global(.content-wrapper .info-box p:last-child) {
    margin-bottom: 0;
  }

  :global(.content-wrapper .info-box code) {
    background-color: var(--color-background);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-family: monospace;
    font-size: 0.9em;
  }

  :global(.content-wrapper .info-box ul) {
    margin-left: 1.5rem;
    padding-left: 0;
  }

  :global(.content-wrapper .info-box li) {
    margin-bottom: 0.5rem;
  }

  :global(.content-wrapper .info-box li:last-child) {
    margin-bottom: 0;
  }

  @media (max-width: 1024px) {
    .layout {
      flex-direction: column;
    }

    .sidebar {
      display: none;
      width: 0;
      height: 0;
      padding: 0;
      border: none;
    }

    .content {
      padding: 1.5rem;
      width: 100%;
      margin-left: 0;
      margin-top: 0;
      max-width: 100%;
      padding-top: 6rem;
    }

    :global(.content-wrapper) {
      max-width: 100%;
      padding-left: 0;
    }

    :global(.content-wrapper h2) {
      font-size: 1.75rem;
      margin-top: 1.75rem;
      margin-bottom: 1.25rem;
    }

    :global(.content-wrapper h3) {
      font-size: 1.5rem;
      margin-top: 1.5rem;
      margin-bottom: 1rem;
    }

    :global(.content-wrapper h4) {
      font-size: 1.25rem;
      margin-top: 1.25rem;
      margin-bottom: 0.75rem;
    }

    :global(.content-wrapper h5) {
      font-size: 1.1rem;
      margin-top: 1rem;
      margin-bottom: 0.5rem;
    }

    :global(.content-wrapper p) {
      line-height: 1.7;
      margin-bottom: 1.25rem;
    }

    :global(.content-wrapper img) {
      max-width: 100%;
    }

    :global(.content-wrapper .info-box) {
      width: 90%;
      margin: 2.5rem auto;
      padding: 1.5em 2em;
      border-radius: 0.5rem;
    }
  }

  @media (min-width: 1400px) {
    .sidebar {
      min-width: 300px;
      max-width: 400px;
      width: 25%;
    }

    .sidebar nav {
      padding-left: 2rem;
    }

    .toc-link {
      padding: 0.6rem 1rem;
      font-size: 1.1rem;
    }

    :global(.content-wrapper) {
      max-width: 1000px;
    }
  }

  @media (max-width: 768px) {
    :global(.content-wrapper) {
      width: 100%;
      padding-left: 0;
    }
  }
</style>

<script>
  // Handle active state for TOC links and smooth scrolling
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute('id');
        const link = document.querySelector(`a[href="#${id}"]`);
        if (entry.isIntersecting) {
          document.querySelectorAll('.toc-link').forEach((el) => {
            el.classList.remove('active');
          });
          link?.classList.add('active');
        }
      });
    },
    { 
      rootMargin: '-20% 0px -80% 0px',
      threshold: [0, 0.5, 1]
    }
  );

  // Observe both sections and headings
  document.querySelectorAll('section[id], h2[id], h3[id]').forEach((element) => {
    observer.observe(element);
  });

  // Handle smooth scrolling with offset
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const targetId = this.getAttribute('href');
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        const headerOffset = 100; // Increased offset
        const elementPosition = targetElement.getBoundingClientRect().top;
        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        });
      }
    });
  });

  // Handle initial page load
  document.addEventListener('DOMContentLoaded', () => {
    const hash = window.location.hash;
    if (hash) {
      const targetElement = document.querySelector(hash);
      if (targetElement) {
        const headerOffset = 100; // Same offset as above
        const elementPosition = targetElement.getBoundingClientRect().top;
        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        });
      }
    }
  });
</script>