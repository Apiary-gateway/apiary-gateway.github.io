---
const { children, headings } = Astro.props;
console.log('SidebarScrollLayout props:', { children, headings });
---

<div class="layout">
  <aside class="sidebar">
    <nav>
      <ul class="toc-list">
        {headings.map((item) => (
          <li>
            <a href={`#${item.id}`} class="toc-link" id={`link-${item.id}`}>
              {item.title}
            </a>
            {item.children && (
              <ul class="toc-sublist">
                {item.children.map((child) => (
                  <li>
                    <a href={`#${child.id}`} class="toc-link" id={`link-${child.id}`}>
                      {child.title}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
  </aside>

  <main class="content">
    <slot />
  </main>
</div>

<style>
  /* Ensure smooth scroll respects padding (e.g. if fixed headers exist) */
  html {
    scroll-padding-top: 3rem;
  }

  .layout {
    display: flex;
    background-color: var(--color-background);
    color: var(--color-text);
    min-height: 100vh;
  }

  .sidebar {
    min-width: 250px;
    width: 20%;
    height: 100vh;
    flex-basis: 250px;
    position: sticky;
    top: 0;
    padding: 2rem 0;
    overflow-y: auto;
    border-right: 1px solid var(--color-border);
    background-color: var(--color-background);
  }

  .sidebar nav {
    background-color: inherit;
    padding: 0 1.5rem 0 1rem;
  }

  .content {
    flex: 1;
    padding: 2rem;
    scroll-behavior: smooth;
    max-width: 100%;
    overflow-x: hidden;
    background-color: var(--color-background);
    color: var(--color-text);
  }

  .toc-list,
  .toc-sublist {
    list-style: none;
    padding-left: 0;
    margin-top: 0.25rem;
  }

  .toc-sublist {
    margin-left: 1rem;
    padding-left: 1rem;
  }

  .toc-link {
    display: block;
    padding: 0.3rem 0.5rem;
    color: var(--color-text-secondary);
    font-size: 0.875rem;
    text-decoration: none;
    transition: color 0.2s ease;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .toc-link:hover {
    color: var(--color-text);
  }

  .toc-link.active {
    color: var(--color-primary);
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .sidebar {
      display: none;
    }

    .content {
      padding: 1rem;
      width: 100%;
    }
  }
</style>

<script>
  // Handle active state for TOC links
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute('id');
        const link = document.querySelector(`a[href="#${id}"]`);
        if (entry.isIntersecting) {
          document.querySelectorAll('.toc-link').forEach((el) => {
            el.classList.remove('active');
          });
          link?.classList.add('active');
        }
      });
    },
    { rootMargin: '-50% 0px -50% 0px' }
  );

  document.querySelectorAll('h2, h3').forEach((heading) => {
    observer.observe(heading);
  });
</script>
