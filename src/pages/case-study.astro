---
import SidebarScrollLayout from '../layouts/SidebarScrollLayout.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import mdxConfig from '../mdx.config.js';

// Define the structure of your case study content
const headings = [
  {
    id: "introduction",
    title: "Introduction",
    img: "/images/homepage-img1.jpg",
    children: [
      {
        id: "overview",
        title: "Overview",
        img: "/images/homepage-img1.jpg"
      },
      {
        id: "problem-statement",
        title: "Problem Statement",
        img: "/images/homepage-img1.jpg"
      }
    ]
  },
  {
    id: "research",
    title: "Research",
    img: "/images/homepage-img1.jpg",
    children: [
      {
        id: "user-research",
        title: "User Research",
        img: "/images/homepage-img1.jpg"
      },
      {
        id: "market-analysis",
        title: "Market Analysis",
        img: "/images/homepage-img1.jpg"
      }
    ]
  },
  {
    id: "design",
    title: "Design",
    img: "/images/homepage-img1.jpg",
    children: [
      {
        id: "wireframes",
        title: "Wireframes",
        img: "/images/homepage-img1.jpg"
      },
      {
        id: "prototypes",
        title: "Prototypes",
        img: "/images/homepage-img1.jpg"
      }
    ]
  }
];

// Dynamically import all content from content/case-study directory
const sectionComponents = Object.fromEntries(
  await Promise.all(
    headings.flatMap(section => [
      [section.id, import(`../content/case-study/${section.id}.mdx`)],
      ...(section.children || []).map(child => 
        [child.id, import(`../content/case-study/${child.id}.mdx`)]
      )
    ]).map(async ([id, importPromise]) => {
      try {
        const module = await importPromise;
        return [id, module.default];
      } catch (error) {
        console.error(`Error loading MDX for ${id}:`, error);
        return [id, null];
      }
    })
  )
);

// Helper: Build child image map
function extractChildImages(children = []) {
  return Object.fromEntries(
    children
      .filter((child) => child.img)
      .map((child) => [child.id, child.img])
  );
}
---

<BaseLayout>
  <SidebarScrollLayout headings={headings}>
    <slot>
      {headings.map(({ id, img, children }) => {
        const Component = sectionComponents[id];
        const childImages = extractChildImages(children);
        return Component ? (
          <div class="section-content" id={id}>
            <div class="content-wrapper">
              <Component components={mdxConfig.components} img={img} childImages={childImages} />
            </div>
          </div>
        ) : null;
      })}
      {headings.flatMap(({ children = [] }) => 
        children.map(({ id, img }) => {
          const Component = sectionComponents[id];
          return Component ? (
            <div class="section-content" id={id}>
              <div class="content-wrapper">
                <Component components={mdxConfig.components} img={img} />
              </div>
            </div>
          ) : null;
        })
      )}
    </slot>
  </SidebarScrollLayout>
</BaseLayout>
