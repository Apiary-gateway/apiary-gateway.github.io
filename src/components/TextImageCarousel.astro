---
interface TextImageCarouselItem {
  text: string;
  image: string;
  caption?: string;
}

interface Props {
  items: TextImageCarouselItem[];
  autoPlay?: boolean;
  interval?: number;
  title?: string;
}

const { items, autoPlay = false, interval = 5000, title = "Interactive Walkthrough" } = Astro.props;
---

<div class="walkthrough-wrapper">
  <!-- <h3 class="walkthrough-title">{title}</h3> -->
  <div class="text-image-carousel-container">
    <div class="carousel-content">
      <div class="text-image-carousel">
        {items.map((item, index) => (
          <div class="text-image-carousel-item" data-index={index}>
            <div class="text-content" set:html={item.text} />
            <div class="image-content">
              <img src={item.image} alt={item.caption || `Slide ${index + 1}`} />
              {item.caption && <div class="caption">{item.caption}</div>}
            </div>
          </div>
        ))}
      </div>
      
      <button class="carousel-control prev" aria-label="Previous slide">❮</button>
      <button class="carousel-control next" aria-label="Next slide">❯</button>
    </div>
    
    <div class="carousel-indicators">
      {items.map((_, index) => (
        <button class="indicator" data-index={index} aria-label={`Go to slide ${index + 1}`}></button>
      ))}
    </div>
  </div>
</div>

<style>
  .walkthrough-wrapper {
    background: var(--color-background-alt);
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--color-border);
  }

  .walkthrough-title {
    color: var(--color-text);
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    text-align: center;
    font-weight: 600;
  }

  .text-image-carousel-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .carousel-content {
    position: relative;
    overflow: hidden;
  }

  .text-image-carousel {
    display: flex;
    transition: transform 0.5s ease-in-out;
    flex: 1;
  }

  .text-image-carousel-item {
    min-width: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .text-content {
    padding: 0.25rem 1rem;
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--color-text);
  }

  .text-content code {
    background: var(--color-background);
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-family: monospace;
  }

  .image-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    gap: 0.25rem;
  }

  .image-content img {
    width: 100%;
    height: auto;
    max-height: 80vh;
    object-fit: contain;
    display: block;
  }

  .caption {
    color: var(--color-text);
    text-align: center;
    font-size: 0.9rem;
    opacity: 0.8;
    padding: 0.25rem 0.5rem;
    max-width: 100%;
    word-wrap: break-word;
  }

  .carousel-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 1rem;
    cursor: pointer;
    font-size: 1.5rem;
    z-index: 10;
    height: 3rem;
    width: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .carousel-control:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  .prev {
    left: 0;
  }

  .next {
    right: 0;
  }

  .carousel-indicators {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    padding: 0.5rem;
  }

  .indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-text);
    opacity: 0.3;
    border: none;
    cursor: pointer;
    padding: 0;
    transition: opacity 0.3s ease;
  }

  .indicator.active {
    opacity: 0.8;
  }

  @media (max-width: 768px) {
    .walkthrough-wrapper {
      padding: 1.5rem;
      margin: 1.5rem 0;
    }

    .walkthrough-title {
      font-size: 1.3rem;
      margin-bottom: 1rem;
    }

    .text-image-carousel-container {
      gap: 0.75rem;
    }

    .text-image-carousel-item {
      gap: 0.25rem;
    }

    .text-content {
      padding: 0.125rem 0.75rem;
    }

    .image-content {
      gap: 0.125rem;
    }

    .image-content img {
      max-height: 70vh;
    }

    .caption {
      font-size: 0.8rem;
      padding: 0.25rem;
    }

    .carousel-indicators {
      padding: 0.25rem;
    }

    .carousel-control {
      height: 2.5rem;
      width: 2.5rem;
      font-size: 1.2rem;
    }
  }
</style>

<script>
  const carousel = document.querySelector('.text-image-carousel') as HTMLElement;
  const items = document.querySelectorAll('.text-image-carousel-item');
  const prevButton = document.querySelector('.prev');
  const nextButton = document.querySelector('.next');
  const indicators = document.querySelectorAll('.indicator');
  
  let currentIndex = 0;
  let autoPlayInterval: number | null = null;
  
  const updateCarousel = () => {
    if (carousel) {
      carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
    }
    indicators.forEach((indicator, index) => {
      indicator.classList.toggle('active', index === currentIndex);
    });
  };
  
  const nextSlide = () => {
    currentIndex = (currentIndex + 1) % items.length;
    updateCarousel();
  };
  
  const prevSlide = () => {
    currentIndex = (currentIndex - 1 + items.length) % items.length;
    updateCarousel();
  };
  
  const startAutoPlay = () => {
    if (autoPlayInterval) return;
    autoPlayInterval = setInterval(nextSlide, interval);
  };
  
  const stopAutoPlay = () => {
    if (autoPlayInterval) {
      clearInterval(autoPlayInterval);
      autoPlayInterval = null;
    }
  };
  
  // Event Listeners
  if (prevButton) {
    prevButton.addEventListener('click', () => {
      stopAutoPlay();
      prevSlide();
    });
  }
  
  if (nextButton) {
    nextButton.addEventListener('click', () => {
      stopAutoPlay();
      nextSlide();
    });
  }
  
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      stopAutoPlay();
      currentIndex = index;
      updateCarousel();
    });
  });
  
  // Touch support
  let touchStartX = 0;
  let touchEndX = 0;
  
  if (carousel) {
    carousel.addEventListener('touchstart', (e) => {
      const touchEvent = e as TouchEvent;
      touchStartX = touchEvent.changedTouches[0].screenX;
    });
    
    carousel.addEventListener('touchend', (e) => {
      const touchEvent = e as TouchEvent;
      touchEndX = touchEvent.changedTouches[0].screenX;
      handleSwipe();
    });
  }
  
  const handleSwipe = () => {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
  };
  
  // Initialize
  if (autoPlay) {
    startAutoPlay();
  }
  
  // Cleanup
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoPlay();
    } else if (autoPlay) {
      startAutoPlay();
    }
  });
</script> 