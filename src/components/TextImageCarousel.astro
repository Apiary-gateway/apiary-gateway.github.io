---
interface TextImageCarouselItem {
  text: string;
  image: string;
  caption?: string;
}

interface Props {
  items: TextImageCarouselItem[];
  autoPlay?: boolean;
  interval?: number;
  title?: string;
}

const { items, autoPlay = false, interval = 5000, title = "Interactive Walkthrough" } = Astro.props;
---

<div class="walkthrough-wrapper">
  <!-- <h3 class="walkthrough-title">{title}</h3> -->
  <div class="text-image-carousel-container">
    <div class="carousel-content">
      <div class="text-image-carousel">
        {items.map((item, index) => (
          <div class="text-image-carousel-item" data-index={index}>
            <div class="text-content" set:html={item.text} />
            <div class="image-content">
              <div class="image-wrapper">
                <img src={item.image} alt={item.caption || `Slide ${index + 1}`} data-caption={item.caption} />
                <button class="zoom-button" aria-label="View image in full size">
                  <div class="magnifying-glass">
                    <div class="handle"></div>
                    <div class="plus-horizontal"></div>
                    <div class="plus-vertical"></div>
                  </div>
                </button>
              </div>
              {item.caption && <div class="caption">{item.caption}</div>}
            </div>
          </div>
        ))}
      </div>
      
      <button class="carousel-control prev" aria-label="Previous slide">❮</button>
      <button class="carousel-control next" aria-label="Next slide">❯</button>
    </div>
    
    <div class="carousel-indicators">
      {items.map((_, index) => (
        <button class="indicator" data-index={index} aria-label={`Go to slide ${index + 1}`}></button>
      ))}
    </div>
  </div>
</div>

<div id="image-modal" class="modal">
  <span class="close-modal">&times;</span>
  <img class="modal-content" id="modal-image">
  <div id="modal-caption"></div>
</div>

<style>
  .walkthrough-wrapper {
    background: var(--color-background-alt);
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--color-border);
  }

  .walkthrough-title {
    color: var(--color-text);
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    text-align: center;
    font-weight: 600;
  }

  .text-image-carousel-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .carousel-content {
    position: relative;
    overflow: hidden;
  }

  .text-image-carousel {
    display: flex;
    transition: transform 0.5s ease-in-out;
    flex: 1;
  }

  .text-image-carousel-item {
    min-width: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .text-content {
    padding: 0.25rem 1rem;
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--color-text);
  }

  .text-content code {
    background: var(--color-background);
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-family: monospace;
  }

  .image-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    gap: 0.25rem;
  }

  .image-content img {
    width: 100%;
    height: auto;
    max-height: 80vh;
    object-fit: contain;
    display: block;
  }

  .caption {
    color: var(--color-text);
    text-align: center;
    font-size: 0.9rem;
    opacity: 0.8;
    padding: 0.25rem 0.5rem;
    max-width: 100%;
    word-wrap: break-word;
  }

  .carousel-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 1rem;
    cursor: pointer;
    font-size: 1.5rem;
    z-index: 10;
    height: 3rem;
    width: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .carousel-control:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  .prev {
    left: 0;
  }

  .next {
    right: 0;
  }

  .carousel-indicators {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    padding: 0.5rem;
  }

  .indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-text);
    opacity: 0.3;
    border: none;
    cursor: pointer;
    padding: 0;
    transition: opacity 0.3s ease;
  }

  .indicator.active {
    opacity: 0.8;
  }

  .image-wrapper {
    position: relative;
    display: inline-block;
  }

  .zoom-button {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 4px;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(2px);
    padding: 0;
  }

  .magnifying-glass {
    position: relative;
    width: 20px;
    height: 20px;
    border: 2px solid white;
    border-radius: 50%;
  }

  .handle {
    position: absolute;
    width: 8px;
    height: 2px;
    background: white;
    bottom: -4px;
    right: -4px;
    transform: rotate(45deg);
  }

  .plus-horizontal {
    position: absolute;
    width: 8px;
    height: 2px;
    background: white;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .plus-vertical {
    position: absolute;
    width: 2px;
    height: 8px;
    background: white;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .zoom-button:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
  }

  .zoom-button:hover .magnifying-glass {
    transform: scale(1.1);
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    overflow: auto;
  }

  .modal-content {
    margin: auto;
    display: block;
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
  }

  #modal-caption {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
    text-align: center;
    color: white;
    padding: 10px 0;
    height: 150px;
  }

  .close-modal {
    position: absolute;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    transition: 0.3s;
    cursor: pointer;
  }

  .close-modal:hover,
  .close-modal:focus {
    color: #bbb;
    text-decoration: none;
    cursor: pointer;
  }

  @media (max-width: 768px) {
    .walkthrough-wrapper {
      padding: 1.5rem;
      margin: 1.5rem 0;
    }

    .walkthrough-title {
      font-size: 1.3rem;
      margin-bottom: 1rem;
    }

    .text-image-carousel-container {
      gap: 0.75rem;
    }

    .text-image-carousel-item {
      gap: 0.25rem;
    }

    .text-content {
      padding: 0.125rem 0.75rem;
    }

    .image-content {
      gap: 0.125rem;
    }

    .image-content img {
      max-height: 70vh;
    }

    .caption {
      font-size: 0.8rem;
      padding: 0.25rem;
    }

    .carousel-indicators {
      padding: 0.25rem;
    }

    .carousel-control {
      height: 2.5rem;
      width: 2.5rem;
      font-size: 1.2rem;
    }

    .zoom-button {
      width: 32px;
      height: 32px;
      top: 8px;
      right: 8px;
    }

    .magnifying-glass {
      width: 18px;
      height: 18px;
    }
  }
</style>

<script>
  const carousel = document.querySelector('.text-image-carousel') as HTMLElement;
  const items = document.querySelectorAll('.text-image-carousel-item');
  const prevButton = document.querySelector('.prev');
  const nextButton = document.querySelector('.next');
  const indicators = document.querySelectorAll('.indicator');
  
  let currentIndex = 0;
  let autoPlayInterval: number | null = null;
  const autoPlayEnabled = document.querySelector('.text-image-carousel-container')?.getAttribute('data-autoplay') === 'true';
  const playInterval = Number(document.querySelector('.text-image-carousel-container')?.getAttribute('data-interval') || 5000);
  
  const updateCarousel = () => {
    if (carousel) {
      carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
    }
    indicators.forEach((indicator, index) => {
      indicator.classList.toggle('active', index === currentIndex);
    });
  };
  
  const nextSlide = () => {
    currentIndex = (currentIndex + 1) % items.length;
    updateCarousel();
  };
  
  const prevSlide = () => {
    currentIndex = (currentIndex - 1 + items.length) % items.length;
    updateCarousel();
  };
  
  const startAutoPlay = () => {
    if (autoPlayInterval) return;
    autoPlayInterval = setInterval(nextSlide, playInterval);
  };
  
  const stopAutoPlay = () => {
    if (autoPlayInterval) {
      clearInterval(autoPlayInterval);
      autoPlayInterval = null;
    }
  };
  
  // Event Listeners
  if (prevButton) {
    prevButton.addEventListener('click', () => {
      stopAutoPlay();
      prevSlide();
    });
  }
  
  if (nextButton) {
    nextButton.addEventListener('click', () => {
      stopAutoPlay();
      nextSlide();
    });
  }
  
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      stopAutoPlay();
      currentIndex = index;
      updateCarousel();
    });
  });
  
  // Touch support
  let touchStartX = 0;
  let touchEndX = 0;
  
  if (carousel) {
    carousel.addEventListener('touchstart', (e) => {
      const touchEvent = e as TouchEvent;
      touchStartX = touchEvent.changedTouches[0].screenX;
    });
    
    carousel.addEventListener('touchend', (e) => {
      const touchEvent = e as TouchEvent;
      touchEndX = touchEvent.changedTouches[0].screenX;
      handleSwipe();
    });
  }
  
  const handleSwipe = () => {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
  };
  
  // Initialize
  if (autoPlayEnabled) {
    startAutoPlay();
  }
  
  // Cleanup
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoPlay();
    } else if (autoPlayEnabled) {
      startAutoPlay();
    }
  });

  // Modal functionality
  const modal = document.getElementById('image-modal') as HTMLElement | null;
  const modalImg = document.getElementById('modal-image') as HTMLImageElement | null;
  const modalCaption = document.getElementById('modal-caption') as HTMLElement | null;
  const closeModal = document.querySelector('.close-modal') as HTMLElement | null;
  const zoomButtons = document.querySelectorAll('.zoom-button');

  function showModal(imgSrc: string, caption: string) {
    if (!modal || !modalImg || !modalCaption) return;
    
    modal.style.display = 'block';
    modalImg.src = imgSrc;
    modalCaption.textContent = caption;
  }

  function hideModal() {
    if (!modal) return;
    modal.style.display = 'none';
  }

  zoomButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const img = button.previousElementSibling as HTMLImageElement;
      if (img) {
        const caption = img.getAttribute('data-caption') || '';
        showModal(img.src, caption);
      }
    });
  });

  if (closeModal) {
    closeModal.addEventListener('click', hideModal);
  }

  if (modal) {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        hideModal();
      }
    });
  }

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal?.style.display === 'block') {
      hideModal();
    }
  });
</script> 