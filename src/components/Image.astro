---
interface Props {
  src: string;
  alt: string;
  height?: string;
  width?: string;
  caption?: string;
}

const { src, alt, height = 'auto', width = '100%', caption } = Astro.props;
---

<figure class="image-container">
  <img
    src={src}
    alt={alt}
    class="image"
    loading="lazy"
    data-src={src}
    data-alt={alt}
  />
  {caption && (
    <figcaption class="image-caption">
      {caption}
    </figcaption>
  )}
</figure>

<div id="imageModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <img id="modalImage" alt="Enlarged view">
    <div id="modalCaption"></div>
  </div>
</div>

<style>
  .image-container {
    margin: 2rem 0;
  }

  .image {
    height: v-bind(height);
    width: v-bind(width);
    transition: transform 0.2s ease;
    border-radius: 4px;
    cursor: pointer;
    margin: 0;
    padding: 0;
    display: block;
  }

  .image:hover {
    transform: scale(1.02);
    box-shadow: 0 0 10px rgba(205, 158, 5, 0.3);
  }

  .image-caption {
    text-align: center;
    margin-top: 0.5rem;
    max-width: 80ch;
    margin-left: auto;
    margin-right: auto;
    padding: 0 1rem;
    font-size: 0.9rem;
    color: var(--color-text);
    opacity: 0.8;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.85);
    overflow: auto;
  }

  .modal-content {
    position: relative;
    margin: auto;
    padding: 2rem;
    width: 90%;
    max-width: 1200px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: linear-gradient(135deg, #2d2d2d, #1a1a1a);
    border-radius: 8px;
  }

  #modalImage {
    max-width: 100%;
    max-height: 80vh;
    object-fit: contain;
    margin: 1rem 0;
    border-radius: 4px;
  }

  #modalCaption {
    color: #f0d264;
    text-align: center;
    padding: 1rem;
    max-width: 80%;
    font-size: 1.1rem;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    color: #f0d264;
    font-size: 40px;
    font-weight: bold;
    transition: 0.3s;
    cursor: pointer;
    z-index: 1001;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .close:hover {
    color: #cd9e05;
    transform: scale(1.1);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.image');
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage') as HTMLImageElement;
    const captionText = document.getElementById('modalCaption');
    const closeBtn = document.querySelector('.close');

    if (!modal || !modalImg || !captionText || !closeBtn) return;

    images.forEach(img => {
      img.addEventListener('click', () => {
        const src = img.getAttribute('data-src');
        const alt = img.getAttribute('data-alt');
        
        if (src && alt) {
          modal.style.display = 'block';
          modalImg.src = src;
          captionText.textContent = alt;
        }
      });
    });

    closeBtn.addEventListener('click', () => {
      modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });
  });
</script> 