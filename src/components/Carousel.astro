---
interface CarouselItem {
  image: string;
  caption?: string;
}

interface Props {
  items: CarouselItem[];
  autoPlay?: boolean;
  interval?: number;
}

const { items, autoPlay = false, interval = 5000 } = Astro.props;
---

<div class="carousel-container">
  <div class="carousel">
    {items.map((item, index) => (
      <div class="carousel-item" data-index={index}>
        <img src={item.image} alt={item.caption || `Slide ${index + 1}`} />
        {item.caption && <div class="caption">{item.caption}</div>}
      </div>
    ))}
  </div>
  
  <button class="carousel-control prev" aria-label="Previous slide">❮</button>
  <button class="carousel-control next" aria-label="Next slide">❯</button>
  
  <div class="carousel-indicators">
    {items.map((_, index) => (
      <button class="indicator" data-index={index} aria-label={`Go to slide ${index + 1}`}></button>
    ))}
  </div>
</div>

<style>
  :root {
    --carousel-text-color: #ffffff;
    --carousel-bg-overlay: rgba(0, 0, 0, 0.5);
    --carousel-control-bg: rgba(0, 0, 0, 0.5);
    --carousel-indicator-bg: rgba(255, 255, 255, 0.5);
    --carousel-indicator-active-bg: #ffffff;
  }

  .carousel-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    overflow: hidden;
    padding-bottom: 3.5rem;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .carousel {
    display: flex;
    transition: transform 0.5s ease-in-out;
    flex: 1;
    min-height: 0;
  }

  .carousel-item {
    min-width: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100%;
    min-height: 0;
  }

  .carousel-item img {
    width: 100%;
    height: auto;
    max-height: calc(80vh - 5rem);
    object-fit: contain;
    display: block;
    margin-top: auto;
    align-self: flex-end;
  }

  .caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--carousel-bg-overlay);
    color: var(--carousel-text-color);
    padding: 1rem;
    text-align: center;
    z-index: 5;
    max-height: 3rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    margin-top: 0.5rem;
    font-size: 1rem;
    line-height: 1.4;
  }

  .carousel-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: var(--carousel-control-bg);
    color: var(--carousel-text-color);
    border: none;
    padding: 1rem;
    cursor: pointer;
    font-size: 1.5rem;
    z-index: 10;
    height: 3rem;
    width: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.3s ease;
  }

  .carousel-control:hover {
    background: var(--carousel-bg-overlay);
  }

  .carousel-control:focus {
    outline: 2px solid var(--carousel-text-color);
    outline-offset: 2px;
  }

  .prev {
    left: 1rem;
  }

  .next {
    right: 1rem;
  }

  .carousel-indicators {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    z-index: 10;
    background: var(--carousel-bg-overlay);
    padding: 0.5rem;
    border-radius: 1rem;
  }

  .indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: var(--carousel-indicator-bg);
    border: none;
    cursor: pointer;
    padding: 0;
    transition: background-color 0.3s ease;
  }

  .indicator:hover {
    background: var(--carousel-text-color);
  }

  .indicator.active {
    background: var(--carousel-indicator-active-bg);
  }

  @media (max-width: 768px) {
    .carousel-container {
      max-height: 70vh;
      padding-bottom: 3rem;
    }

    .carousel-item img {
      max-height: calc(70vh - 4.5rem);
    }

    .caption {
      bottom: 2rem;
      font-size: 0.9rem;
      padding: 0.75rem;
      max-height: 2.5rem;
    }

    .carousel-indicators {
      bottom: 0.75rem;
      padding: 0.25rem;
    }

    .carousel-control {
      height: 2.5rem;
      width: 2.5rem;
      font-size: 1.2rem;
    }
  }
</style>

<script>
  const carousel = document.querySelector('.carousel');
  const items = document.querySelectorAll('.carousel-item');
  const prevButton = document.querySelector('.prev');
  const nextButton = document.querySelector('.next');
  const indicators = document.querySelectorAll('.indicator');
  
  let currentIndex = 0;
  let autoPlayInterval: number | null = null;
  
  const updateCarousel = () => {
    carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
    indicators.forEach((indicator, index) => {
      indicator.classList.toggle('active', index === currentIndex);
    });
  };
  
  const nextSlide = () => {
    currentIndex = (currentIndex + 1) % items.length;
    updateCarousel();
  };
  
  const prevSlide = () => {
    currentIndex = (currentIndex - 1 + items.length) % items.length;
    updateCarousel();
  };
  
  const startAutoPlay = () => {
    if (autoPlayInterval) return;
    autoPlayInterval = setInterval(nextSlide, interval);
  };
  
  const stopAutoPlay = () => {
    if (autoPlayInterval) {
      clearInterval(autoPlayInterval);
      autoPlayInterval = null;
    }
  };
  
  // Event Listeners
  prevButton.addEventListener('click', () => {
    stopAutoPlay();
    prevSlide();
  });
  
  nextButton.addEventListener('click', () => {
    stopAutoPlay();
    nextSlide();
  });
  
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      stopAutoPlay();
      currentIndex = index;
      updateCarousel();
    });
  });
  
  // Touch support
  let touchStartX = 0;
  let touchEndX = 0;
  
  carousel.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  });
  
  carousel.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  });
  
  const handleSwipe = () => {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
  };
  
  // Initialize
  if (autoPlay) {
    startAutoPlay();
  }
  
  // Cleanup
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoPlay();
    } else if (autoPlay) {
      startAutoPlay();
    }
  });
</script> 