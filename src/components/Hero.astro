---
const { heroText, heroSubtext } = Astro.props
---

<section class="hero">
  <div class="hero-content">
    <h1>{heroText}</h1>
    <p>{heroSubtext}</p>
    <a href="/case-study" class="hero-button">Read Case Study</a>
  </div>
</section>

<style>
  :root {
    --primary-color: #4CAF50;
    --secondary-color: #45A049;
    --text-color: #ffffff;
    --overlay-color: rgba(0, 0, 0, 0.4);
  }

.hero {
  position: relative;
  height: 100vh;
  width: 100%;
  background: var(--hero-gradient);
  background-size: cover;
  background-position: center;
  background-attachment: fixed;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--text-primary);
  text-align: center;
  padding: 0 1rem;
  overflow: hidden;
  margin-top: 0;
  transition: background 0.3s ease;
}


  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    animation: fadeInUp 1s ease-out;
    margin-top: 0;
    padding-top: 80px;
  }

  .hero h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
    margin-bottom: 2.5rem;
    font-weight: 800;
    line-height: 1.2;
    color: var(--text-primary);
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  }

  .hero p {
    font-size: clamp(1.5rem, 2vw, 1.5rem);
    margin-bottom: 3.5rem;
    color: var(--text-primary);
    opacity: 0.95;
    line-height: 1.6;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .hero-button {
    display: inline-block;
    padding: 1rem 2.5rem;
    background-color: var(--primary-color);
    color: var(--text-primary);
    border-radius: 50px;
    text-decoration: none;
    font-weight: 600;
    font-size: 1.1rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .hero-button:hover {
    background-color: var(--primary-color-hover);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .hero {
      background-attachment: scroll;
    }
    
    .hero-content {
      padding: 0 1.5rem;
    }
  }
</style>

<script>
  const updateHeroTheme = (theme) => {
    const root = document.documentElement;
    if (theme === 'dark') {
      root.style.setProperty('--hero-gradient', 'linear-gradient(135deg, #1a1a1a, #2d2d2d, #404040)');
      root.style.setProperty('--primary-color', '#4CAF50');
      root.style.setProperty('--primary-color-hover', '#45A049');
    } else {
      root.style.setProperty('--hero-gradient', 'linear-gradient(135deg, #f0f2f5, #e2e5e9, #d4d8dd)');
      root.style.setProperty('--primary-color', '#45A049');
      root.style.setProperty('--primary-color-hover', '#3d8b40');
    }
  };

  // Listen for theme changes
  document.addEventListener('DOMContentLoaded', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
    updateHeroTheme(currentTheme);

    // Listen for theme changes from the navbar
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'data-theme') {
          updateHeroTheme(document.documentElement.getAttribute('data-theme'));
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });
  });
</script>
